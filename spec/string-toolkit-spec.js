// Generated by CoffeeScript 1.4.0
(function() {

  describe("String Toolkit", function() {
    describe("at", function() {
      it("returns the character specified by index passed if that index exists", function() {
        expect("bar".at(0)).toEqual("b");
        expect("bar".at(1)).toEqual("a");
        return expect("bar".at(2)).toEqual("r");
      });
      return it("returns empty string when character specified by index passed is out of bounds", function() {
        return expect("bar".at(4)).toEqual('');
      });
    });
    describe("isBlank", function() {
      it("recognizes an empty string as blank", function() {
        return expect("".isBlank()).toBeTruthy();
      });
      it("recognizes spaces as blank", function() {
        expect(" ".isBlank()).toBeTruthy();
        return expect("  ".isBlank()).toBeTruthy();
      });
      it("recognizes tabs as blank", function() {
        expect("\t".isBlank()).toBeTruthy();
        return expect("\t\t".isBlank()).toBeTruthy();
      });
      it("recognizs new lines as blank", function() {
        expect("\n".isBlank()).toBeTruthy();
        return expect("\n\n".isBlank()).toBeTruthy();
      });
      it("recognizes combination of spaces, tabs, and new lines as blank", function() {
        return expect("\n\t  \t\n".isBlank()).toBeTruthy();
      });
      return it("recognizes any non space, tab, or new line as not blank", function() {
        expect("\t a \n".isBlank()).toBeFalsy();
        expect(" 0 ".isBlank()).toBeFalsy();
        return expect("\n!".isBlank()).toBeFalsy();
      });
    });
    describe("camelcase", function() {
      return it("references camelize", function() {
        return expect(String.prototype.camelcase).toEqual(String.prototype.camelize);
      });
    });
    describe("camelize", function() {
      describe("when passed zero arguments", function() {
        it("capitalizes first letter then removes underscores and capitalizes the letters that immediately follow", function() {
          return expect("foo_bar_baz".camelize()).toEqual("FooBarBaz");
        });
        it("sets any letter that isnt the first or immediately following an underscore to lower case", function() {
          return expect("FOO_BAR_BAZ".camelize()).toEqual("FooBarBaz");
        });
        it("does nothing if passed a camelized string", function() {
          return expect("FooBarBaz".camelize()).toEqual("FooBarBaz");
        });
        return it("upperizes lowerized camelized string", function() {
          return expect("fooBarBaz".camelize()).toEqual("FooBarBaz");
        });
      });
      describe("when passed 'upper'", function() {
        it("capitalizes first letter then removes underscores and capitalizes the letters that immediately follow", function() {
          return expect("foo_bar_baz".camelize("upper")).toEqual("FooBarBaz");
        });
        it("sets any letter that isnt the first or immediately following an underscore to lower case", function() {
          return expect("FOO_BAR_BAZ".camelize("upper")).toEqual("FooBarBaz");
        });
        it("does nothing if passed a camelized string", function() {
          return expect("FooBarBaz".camelize("upper")).toEqual("FooBarBaz");
        });
        return it("upperizes lowerized camelized string", function() {
          return expect("fooBarBaz".camelize("upper")).toEqual("FooBarBaz");
        });
      });
      return describe("when passed 'lower'", function() {
        it("lowerizes first letter then removes underscores and capitalizes the letters that immediately follow", function() {
          return expect("foo_bar_baz".camelize("lower")).toEqual("fooBarBaz");
        });
        it("sets any letter that isnt immediately following an underscore to lower case", function() {
          return expect("FOO_BAR_BAZ".camelize("lower")).toEqual("fooBarBaz");
        });
        it("does nothing if passed a lowerized camelized string", function() {
          return expect("fooBarBaz".camelize("lower")).toEqual("fooBarBaz");
        });
        return it("lowerizes first letter if passed upperized camelized string", function() {
          return expect("FooBarBaz".camelize("lower")).toEqual("fooBarBaz");
        });
      });
    });
    describe("constantize", function() {
      it("takes a single word and finds that object within window", function() {
        window.foo = {
          hello: 'world'
        };
        return expect("foo".constantize()).toEqual(window.foo);
      });
      return it("takes dot delimited names and finds corresponding object within window", function() {
        window.foo = {
          hello: {
            world: "hello world"
          }
        };
        return expect('foo.hello.world'.constantize()).toEqual(window.foo.hello.world);
      });
    });
    describe("dasherize", function() {
      it("replaces any underscores with dashes", function() {
        expect("foo_bar_baz".dasherize()).toEqual("foo-bar-baz");
        expect("__".dasherize()).toEqual("--");
        return expect("_hello_world_".dasherize()).toEqual("-hello-world-");
      });
      return it("returns string unchanged if there are no underscores", function() {
        expect("foo".dasherize()).toEqual("foo");
        return expect("some longer phrase (with parentheses)".dasherize()).toEqual("some longer phrase (with parentheses)");
      });
    });
    describe("ellipses", function() {
      it("returns unchanged string if maxLength is greater than string length", function() {
        return expect("example".ellipses(15)).toEqual("example");
      });
      return it("returns string of length maxLength, ellipses included", function() {
        expect("example".ellipses(4)).toEqual("e...");
        return expect("a longer example".ellipses(10)).toEqual("a longe...");
      });
    });
    describe("exclude", function() {
      it("returns false if the string argument is contained in the string object", function() {
        expect("foo".exclude("o")).toBeFalsy();
        return expect("hello".exclude("lo")).toBeFalsy();
      });
      return it("returns true if the string argument is not contained in the string object", function() {
        expect("foo".exclude("a")).toBeTruthy();
        return expect("hello".exclude("ol")).toBeTruthy();
      });
    });
    describe("first", function() {
      it("returns the first character if no argument is passed", function() {
        return expect("foo".first()).toEqual("f");
      });
      it("returns empty string if string is empty", function() {
        return expect("".first()).toEqual("");
      });
      it("returns the number of characters passed as an argument (if less than length of string)", function() {
        return expect("hello".first(2)).toEqual("he");
      });
      return it("returns entire string if number of characters passed is greater than length of string", function() {
        return expect("hello".first(12)).toEqual("hello");
      });
    });
    describe("from", function() {
      it("returns substring from position passed to end of string", function() {
        expect("hello".from(0)).toEqual("hello");
        expect("hello".from(1)).toEqual("ello");
        return expect("hello".from(3)).toEqual("lo");
      });
      return it("returns an empty string if position passed is greater than length of string", function() {
        return expect("hello".from(12)).toEqual("");
      });
    });
    describe("humanize", function() {
      it("adds a humanize method to String", function() {
        return expect("".humanize != null).toBeTruthy();
      });
      it("removes underscores and capitalizes first letter", function() {
        return expect("foo_bar_baz".humanize()).toEqual("Foo bar baz");
      });
      it("sets first letter to capital and the rest to lowercase", function() {
        return expect("Foo_Bar_Baz".humanize()).toEqual("Foo bar baz");
      });
      return it("does nothing when passed a humanized string", function() {
        return expect("Foo bar baz".humanize()).toEqual("Foo bar baz");
      });
    });
    describe("include", function() {
      it("returns true if the string argument is contained in the string object", function() {
        expect("foo".include("o")).toBeTruthy();
        return expect("hello".include("lo")).toBeTruthy();
      });
      return it("returns false if the string argument is not contained in the string object", function() {
        expect("foo".include("a")).toBeFalsy();
        return expect("hello".include("ol")).toBeFalsy();
      });
    });
    describe("last", function() {
      it("returns last character when no argument is passed", function() {
        return expect("hello".last()).toEqual("o");
      });
      it("returns substring of length passed, terminating at end of string when length passed is less than string length", function() {
        return expect("hello".last(3)).toEqual("llo");
      });
      return it("returns entire string when length passed is greater than length of string", function() {
        return expect("hello".last(12)).toEqual("hello");
      });
    });
    describe("parameterize", function() {
      it("removes all non alphanumeric characters and replaces spaces with the separator passed", function() {
        expect("Foo bar baz".parameterize('_')).toEqual("Foo_bar_baz");
        return expect("hello! world@".parameterize('.')).toEqual("hello.world");
      });
      return it("defaults to a dash separator", function() {
        return expect("foo bar baz".parameterize()).toEqual("foo-bar-baz");
      });
    });
    describe("reverse", function() {
      return it("reverses the string", function() {
        expect("foo".reverse()).toEqual("oof");
        return expect("bar".reverse()).toEqual("rab");
      });
    });
    return describe("to", function() {
      it("returns substring from index 0 to position passed", function() {
        expect("hello".to(0)).toEqual("h");
        return expect("hello".to(2)).toEqual("hel");
      });
      return it("returns entire string when position passed is greater than length of string", function() {
        return expect("hello".to(12)).toEqual("hello");
      });
    });
  });

}).call(this);
