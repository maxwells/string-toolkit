// Generated by CoffeeScript 1.4.0

/*

at
blank?
camelcase
camelize
classify
constantize
dasherize
deconstantize
demodulize
include
exclude
first
foreign_key
from
humanize
last
parameterize
pluralize
singularize
squish
tableize
titleize
to
to_date
to_datetime
to_time
truncate
underscore
*/


(function() {
  var key, stringExtension, value;

  stringExtension = {
    at: function(i) {
      return this.charAt(i);
    },
    isBlank: function() {
      return this.match(/[^\t\n\ ]/) === null;
    },
    camelize: function(firstLetter) {
      var i, product, s, sections, _i, _len;
      if (firstLetter == null) {
        firstLetter = "upper";
      }
      product = this.replace(/([A-Z]{1}[a-z])/g, "_$1");
      if (product.at(0) === "_") {
        product = product.substring(1, product.length);
      }
      sections = product.split(/_/);
      product = "";
      for (i = _i = 0, _len = sections.length; _i < _len; i = ++_i) {
        s = sections[i];
        product += (i === 0 && firstLetter === "lower" ? s.charAt(0).toLowerCase() : s.charAt(0).toUpperCase()) + s.slice(1).toLowerCase();
      }
      return product;
    },
    classify: function() {
      return this.camelize(this.singuralize());
    },
    constantize: function() {
      var klass, name, names, _i, _len;
      names = this.split('.');
      klass = window;
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        name = names[_i];
        klass = klass[name];
      }
      return klass;
    },
    ellipses: function(maxLength) {
      if (this.length > maxLength) {
        return this.to(maxLength - 4) + "...";
      } else {
        return this;
      }
    },
    dasherize: function() {
      return this.replace(/_/g, "-");
    },
    deconstantize: function() {},
    include: function(string) {
      return this.indexOf(string) > -1;
    },
    exclude: function(string) {
      return this.indexOf(string) === -1;
    },
    first: function(num) {
      if (num == null) {
        num = 1;
      }
      return this.substr(0, num);
    },
    from: function(position) {
      return this.substring(position, this.length);
    },
    humanize: function() {
      var s;
      s = this.replace(/_/g, " ").toLowerCase();
      return s.charAt(0).toUpperCase() + s.slice(1);
    },
    last: function(num) {
      if (num == null) {
        num = 1;
      }
      return this.substring(this.length - num, this.length);
    },
    parameterize: function(separator) {
      if (separator == null) {
        separator = '-';
      }
      return this.replace(/[^a-zA-Z0-9\ ]/g, "").replace(/\ /g, separator);
    },
    to: function(position) {
      return this.substr(0, position + 1);
    }
  };

  stringExtension.camelcase = stringExtension.camelize;

  for (key in stringExtension) {
    value = stringExtension[key];
    String.prototype[key] = value;
  }

}).call(this);
