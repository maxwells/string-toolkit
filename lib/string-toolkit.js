// Generated by CoffeeScript 1.4.0

/*

at
blank?
camelcase
camelize
classify
constantize
dasherize
deconstantize
demodulize
include
exclude
first
foreign_key
from
humanize
last
parameterize
pluralize
singularize
squish
tableize
titleize
to
to_date
to_datetime
to_time
truncate
underscore
*/


(function() {
  var globalNamespace, key, value, _base, _base1, _fn, _ref;

  globalNamespace = function() {
    if (typeof window !== "undefined" && window !== null) {
      return window;
    }
    if (typeof global !== "undefined" && global !== null) {
      return global;
    }
  };

  (_base = globalNamespace()).com || (_base.com = {});

  com.maxwells || (com.maxwells = {});

  (_base1 = com.maxwells).String || (_base1.String = {});

  com.maxwells._S = (function() {

    function _S() {}

    _S.prototype.at = function(i) {
      return this.charAt(i);
    };

    _S.prototype.isBlank = function() {
      return this.match(/[^\t\n\ ]/) === null;
    };

    _S.prototype.camelize = function(firstLetter) {
      var i, product, s, sections, _i, _len;
      if (firstLetter == null) {
        firstLetter = "upper";
      }
      product = this.replace(/([A-Z]{1}[a-z])/g, "_$1");
      if (product.at(0) === "_") {
        product = product.substring(1, product.length);
      }
      sections = product.split(/_/);
      product = "";
      for (i = _i = 0, _len = sections.length; _i < _len; i = ++_i) {
        s = sections[i];
        product += (i === 0 && firstLetter === "lower" ? s.charAt(0).toLowerCase() : s.charAt(0).toUpperCase()) + s.slice(1).toLowerCase();
      }
      return product;
    };

    _S.prototype.classify = function() {
      return this.camelize(this.singuralize());
    };

    _S.prototype.constantize = function() {
      var klass, name, names, _i, _len;
      names = this.split('.');
      klass = globalNamespace();
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        name = names[_i];
        klass = klass[name];
      }
      return klass;
    };

    _S.prototype.ellipses = function(maxLength) {
      if (this.length > maxLength) {
        return this.to(maxLength - 4) + "...";
      } else {
        return this;
      }
    };

    _S.prototype.dasherize = function() {
      return this.replace(/_/g, "-");
    };

    _S.prototype.deconstantize = function() {};

    _S.prototype.define = function(value) {
      var current, i, namespace, object, _i, _len;
      namespace = this.split(".");
      current = globalNamespace();
      for (i = _i = 0, _len = namespace.length; _i < _len; i = ++_i) {
        object = namespace[i];
        current[object] || (current[object] = (i === namespace.length - 1 ? value : {}));
        current = current[object];
      }
      return value;
    };

    _S.prototype.include = function(string) {
      return this.indexOf(string) > -1;
    };

    _S.prototype.exclude = function(string) {
      return this.indexOf(string) === -1;
    };

    _S.prototype.first = function(num) {
      if (num == null) {
        num = 1;
      }
      return this.substr(0, num);
    };

    _S.prototype.from = function(position) {
      return this.substring(position, this.length);
    };

    _S.prototype.humanize = function() {
      var s;
      s = this.replace(/_/g, " ").toLowerCase();
      return s.charAt(0).toUpperCase() + s.slice(1);
    };

    _S.prototype.last = function(num) {
      if (num == null) {
        num = 1;
      }
      return this.substring(this.length - num, this.length);
    };

    _S.prototype.parameterize = function(separator) {
      if (separator == null) {
        separator = '-';
      }
      return this.replace(/[^a-zA-Z0-9\ ]/g, "").replace(/\ /g, separator);
    };

    _S.prototype.reverse = function() {
      return this.split("").reverse().join("");
    };

    _S.prototype.to = function(position) {
      return this.substr(0, position + 1);
    };

    return _S;

  })();

  com.maxwells._S.prototype.camelcase = com.maxwells._S.prototype.camelize;

  com.maxwells.S = (function() {

    function S(s) {
      this.s = s;
    }

    S.applyToPrototype = function() {
      var key, value, _ref, _results;
      _ref = com.maxwells._S.prototype;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(String.prototype[key] = value);
      }
      return _results;
    };

    S.removeFromPrototype = function() {
      var key, value, _ref, _results;
      _ref = com.maxwells._S.prototype;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(delete String.prototype[key]);
      }
      return _results;
    };

    return S;

  })();

  _ref = com.maxwells._S.prototype;
  _fn = function(key, value) {
    return com.maxwells.S.prototype[key] = function() {
      return value.apply(this.s, arguments);
    };
  };
  for (key in _ref) {
    value = _ref[key];
    _fn(key, value);
  }

  globalNamespace().$S = function(string) {
    return new com.maxwells.S(string);
  };

}).call(this);
